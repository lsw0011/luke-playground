
const printBoard = (arr) => {
	arr.reduce((prev, curr, index) => {
		const next = prev + ' ' + curr
		if(index % 4 === 3) {
			if(index === 3) console.log(' ' + next);
			else console.log(next);
			return('')
		}
		return(next)
	})
}

const generateRandomSquare = (array) => {
	const openIndexes = [];
	for(let i = 0; i < array.length; i++) {
		if(array[i] === 0) openIndexes.push(i);
	}
	if (openIndexes.length === 0) return false;
	const newLocation = Math.floor(Math.random() * openIndexes.length);
	array[openIndexes[newLocation]] = 2
	return true;
}


const shiftValue = (array, i1, i2) => {
	array[i1] = array[i2];
	array[i2] = 0;
}

const doubleValue = (array, i1, i2) => {
	array[i1] *= 2;
	array[i2] = 0;
}

const getRow = (array, row) => {
	nRow = []
	for(let i = row * 4; i < row * 4 + 4; i++) {
		nRow.push(array[i])
	}
	return nRow;
}

const insertRow = (array, nRow, row) => {
	for(let i = 0; i < 4; i++) {
		array[row * 4 + i] = nRow[i];
	} 
}

const getColumn = (array, column) => {
	const nColumn = [];
	for(let i = column; i / 4 < 4; i += 4) {
		nColumn.push(array[i])
	}
	return nColumn;
}

const insertColumn = (array, nColumn, column) => {
	for(let i = 0; i < 4; i ++) {
		array[i * 4 + column] = nColumn[i]
	}
}

const shiftZeros = (row, start, stop, dir) => {
	if(start === stop) return;
	if(row[start] === 0) {
		shiftZeros(row, start - dir, stop, dir);
		shiftValue(row, start, start - dir);
	}
	shiftZeros(row, start - dir, stop, dir);
}


const shiftForward = (row, end) => {
	for(let i = end - 1; i > 0; i--) {
		shiftZeros(row, i, 0, 1);
		if(row[i - 1] === row[i]) {
			doubleValue(row, i, i - 1);
			shiftZeros(row, i, 0, 1);
			shiftForward(row, i - 1);
		}
	}
}

const shiftBackward = (row, start) => {
	for(let i = start; i < row.length - 1; i++) {
		shiftZeros(row, i, row.length - 1, -1)
		if(row[i + 1] === row[i]) {
			doubleValue(row, i, i + 1);
			shiftZeros(row, i, row.length - 1, -1)
			shiftBackward(row, i + 1);
		}
	}
}
		
const right = (arr) => {
	for(let i = 0; i < 4; i++) {
		const row = getRow(arr, i);
		shiftForward(row, row.length, 1);
		insertRow(arr, row, i);
	}
}

const down = (arr) => {
	for(let i = 0; i < 4; i++) {
		const column = getColumn(arr, i);
		shiftForward(column, column.length, 1);
		insertColumn(arr, column, i);
	}
}

const left = (arr) => {
	for(let i = 0; i < 4; i++) {
		const row = getRow(arr, i);
		shiftBackward(row, 0, 1);
		insertRow(arr, row, i);
	}
}

const up = (arr) => {
	for(let i = 0; i < 4; i++) {
		const column = getColumn(arr, i);
		shiftBackward(column, 0, 1);
		insertColumn(arr, column, i);
	}
}

const movement = (arr, handler) => {
	const arrClone = Object.assign([], arr);
	handler(arr)
	for(let i = 0; i < 16; i++) {
		if(arr[i] !== arrClone[i]) return true;
	}
	return false
}

const readline = require('readline-sync');
let run = true;
gameBoard = new Array(16).fill(0);
generateRandomSquare(gameBoard)
generateRandomSquare(gameBoard)
printBoard(gameBoard)
while(run) {
	userinput = readline.question('');
	let valid = false;
	switch (userinput) {
		case ',':
			valid = movement(gameBoard, up)
			break;
		case 'o':;
			valid = movement(gameBoard, down)
			break;
		case 'a':
			valid = movement(gameBoard, left)
			break;
		case 'e':
			valid = movement(gameBoard, right)
			break;
		case ':q':
			console.log('quitting');
			run = false;
			break;
		default:		
			console.log('not a direction');
	}
	if(valid) {
		generateRandomSquare(gameBoard);
		printBoard(gameBoard);
	} else {
		console.log('not valid')
	}
	console.log('\n');
}

